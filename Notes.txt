I may need to convert all of my doubles to floats for the code to work with processing. This might be a pain.

I need to use standard java library functions to recreate Golan’s interface for specifying function input values.


2/2/2015:

The plan:
I need to get the interface working.

Get 1 function working.
Create a string that represents the source code of the function.
Allow the tool to correctly form and write one function.


Once this works, it is a matter of mechanically getting the rest of the functions to work.

I have gotten the builtin functions and the first batch of functions to compile.


I had to reinstall and configure an ANT build system, including filling out the script files in order to get the processing build system to work correctly.

Proccessing to Java conversions:

1. All methods in Proccessing are public, whereas they will need to be explicitly labeled in java. This may at times lead to some strange compilation problems. When in doubt, make things public.

2. The java reflection getMethods() function only finds public methods.

3. Proccessing is mostly float based, whereas Java assumes double types. The character 'f' needs to be appended to all number literals.

Replacement rules for quick translation:

"float function_" --> "public float function_"


I need to check what to do with the arcCircles in certain functions, because they throw an error.

I had to remove some troublesome '-' characters due to a character encoding issue.

Fixed some incompatibilities between java compilation versions, i.e. changed (float) casts to (Float) casts.

Made it so closing the tool does not close processing.

Make sure to put data in the data folder, such as code txt.

TODO:
It would be nice if I could sort the functions by name.

It would be nice to decompose all of the code out of just one applet class.
Implement New Tabs.



building the code.
------------------
Make sure any other programs such as proccessing are closed.
Copy the code from src/template/tool to proccessing-tooltemplate-0.5.3/src/template/tool

Run the Ant build script from within Eclipse.
You should make sure the build script should be configured to send the built tool to the tools folder of your installed processing 3 environment.
The Newly modified tool should be fit for testing and use within processing 3.


Translateing from Proccessing to PApplet java.
------------------------------------------

Proccessing Colors are integers, so change the 'color' type to 'int'

Floats need to end with 'f', so change "8.0" to "8.0f"

If you wish to create separate classes, but still call proccessing functions, then allow each of the decomposed classes to have a reference to a static variable pointing to the main PApplet class.




